README
========================================================================
A thesis written based on this software can be viewed on the
file doc/Jun_Luo_MASc_Thesis.pdf.

For people who have no background related to this area of research,
reviewing the thesis can be helpful. Some of the results produced
by this software can be viewed in the thesis.

========================================================================
Prerequisite Libraries.

To compile, build, and run this program, the compiler should support C++17.
We recommend the use of GCC with a version 7.2.0 or higher as the C++ compiler.
In addition, the software implementation makes heavy use of some C++ libraries.
Ensure that all of the following libraries are installed before building the
program:

    1) Computational Geometry Algorithm Library (CGAL)
    http://www.cgal.org

    2) Boost Library
    https://www.boost.org

    3) OpenGL Utility Toolkit (GLUT)
    http://www.opengl.org/resources/libraries/glut/
    http://freeglut.sourceforge.net

    4) Signal Processing Library (SPL)
    http://www.ece.uvic.ca/~mdadams/SPL
   
    5) Signal Processing Library Extension Library (SPLEL)
    NOTE: THE SPLEL LIBRARY IS CURRENTLY A PRIVATE LIBRARY OWNED
    BY Michael D.Adams. THIS LIBRARY IS NOT INTENDED TO BE RELEASED
    TO PUBLIC AT THIS TIME.

========================================================================

1. To build the program, run following commands:

    mkdir -p $BINARY_DIR
    cmake -H. -B$BINARY_DIR
    cmake --build $BINARY_DIR

You can choose to use SPL::rastetize::Rational<long long> as the scan conversion
real type by enabling the SCAN_CONVERSION_REAL_TYPE_USE_RATIONAL option,
which is by default as false (if false, the scan conversion real type is double).
e.g
   
    mkdir -p $BINARY_DIR
    cmake -H. -B$BINARY_DIR -DSCAN_CONVERSION_REAL_TYPE_USE_RATIONAL=true
    cmake --build $BINARY_DIR

2. make_model program.

In order to run the make_model program, the following options must be provided:
   1) --density  (or --size  or --error): specify the target density
   2) the input image file in PNM format (read from standard input)
all other options have a default value and can be found by the -h option.
The result mesh model is output to standard output stream.

examples of using the software:
1) use the MED method to generate the mesh for a grayscale/rgb image:

   $BINARY_DIR/src/make_model <input_image.pnm> output_model.model \
    --density 2 --initial-density 2 --initial-generator ed \
    --bad-point-removal 1 --ed-strategy-error-mode mirror \
    --ed-strategy max_comp_mmsodd_ed

2) use the MGPRFS method to generate the mesh for a grayscale/rgb image:

   $BINARY_DIR/src/make_model <input_image.pnm> output_model.model \
    --density 2 --relative-initial-density 400 --initial-generator ed \
    --bad-point-removal 0 --ed-initial-error-mode mirror \
    --ed-strategy max_comp_mmsodd_ed

More detailed information can be seen in file doc/command_line_interface.txt

3. rasterize_model program

In order to run the rasterize_model program, you can run one of the following command:

   $BINARY_DIR/src/rasterize_model <input_model.model> recon_image.pnm

or

   $BINARY_DIR/src/rasterize_model -i input_model.model -o recon_image.pnm

  

